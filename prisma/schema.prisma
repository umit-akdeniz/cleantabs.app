generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id            String        @id @default(cuid())
  name          String
  icon          String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Int           @default(0)
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcategories Subcategory[]
}

model Subcategory {
  id         String   @id @default(cuid())
  name       String
  icon       String?
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Int      @default(0)
  sites      Site[]
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Site {
  id              String      @id @default(cuid())
  name            String
  url             String
  description     String?
  color           String?
  favicon         String?
  personalNotes   String?
  customInitials  String?
  lastChecked     DateTime?
  reminderEnabled Boolean     @default(false)
  subcategoryId   String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  order           Int         @default(0)
  reminders       Reminder[]
  subcategory     Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  subLinks        SubLink[]
  tags            Tag[]
}

model Tag {
  id     String @id @default(cuid())
  name   String
  siteId String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

model SubLink {
  id     String @id @default(cuid())
  name   String
  url    String
  siteId String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

model User {
  id                      String     @id @default(cuid())
  name                    String?
  email                   String     @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  plan                    Plan       @default(FREE)
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  resetPasswordExpiry     DateTime?
  resetPasswordToken      String?    @unique
  stripeCustomerId        String?    @unique
  stripeSubscriptionId    String?    @unique
  verificationToken       String?    @unique
  verificationTokenExpiry DateTime?
  verificationCode        String?
  verificationCodeExpiry  DateTime?
  accounts                Account[]
  categories              Category[]
  sessions                Session[]
  reminders               Reminder[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reminder {
  id           String        @id @default(cuid())
  title        String
  description  String?
  reminderDate DateTime
  reminderType ReminderType  @default(NOTIFICATION)
  emailSent    Boolean       @default(false)
  completed    Boolean       @default(false)
  siteId       String
  userId       String
  isRecurring  Boolean       @default(false)
  recurringType RecurringType?
  nextReminder DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  site         Site          @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Plan {
  FREE
  PREMIUM
}

enum ReminderType {
  NOTIFICATION
  EMAIL
  BOTH
}

enum RecurringType {
  DAILY
  WEEKLY
  MONTHLY
}
