import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { prisma } from '@/lib/prisma';
import { sendBookmarkExport } from '@/lib/email';

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.email) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Check if user has premium plan
    const user = await prisma.user.findUnique({
      where: { email: session.user.email }
    });

    if (!user || user.plan !== 'PREMIUM') {
      return NextResponse.json(
        { error: 'Premium subscription required' },
        { status: 403 }
      );
    }

    // Fetch all user's categories, subcategories, and sites
    const categories = await prisma.category.findMany({
      where: { userId: user.id },
      include: {
        subcategories: {
          include: {
            sites: {
              include: {
                tags: true,
                subLinks: true
              },
              orderBy: { order: 'asc' }
            }
          },
          orderBy: { order: 'asc' }
        }
      },
      orderBy: { order: 'asc' }
    });

    // Generate HTML bookmark file
    const htmlContent = generateBookmarkHtml(categories);
    
    // Count total bookmarks
    const totalBookmarks = categories.reduce((total, category) => {
      return total + category.subcategories.reduce((subTotal, subcategory) => {
        return subTotal + subcategory.sites.length;
      }, 0);
    }, 0);

    // Send email with bookmark export
    const result = await sendBookmarkExport(session.user.email, htmlContent, totalBookmarks);

    if (!result.success) {
      return NextResponse.json(
        { error: 'Failed to send export email' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      message: 'Bookmark export sent to your email successfully',
      totalBookmarks
    });

  } catch (error) {
    console.error('Bookmark export error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

function generateBookmarkHtml(categories: any[]): string {
  const currentDate = new Date().toLocaleDateString();
  
  let html = `<!DOCTYPE NETSCAPE-Bookmark-file-1>
<!--This is an automatically generated file.
It will be read and overwritten.
Do Not Edit! -->
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
<TITLE>CleanTabs Bookmarks Export - ${currentDate}</TITLE>
<H1>CleanTabs Bookmarks Export</H1>
<DL><p>
`;

  categories.forEach(category => {
    html += `    <DT><H3>${escapeHtml(category.name)}</H3>\n`;
    html += `    <DL><p>\n`;
    
    category.subcategories.forEach((subcategory: any) => {
      if (subcategory.sites.length > 0) {
        html += `        <DT><H3>${escapeHtml(subcategory.name)}</H3>\n`;
        html += `        <DL><p>\n`;
        
        subcategory.sites.forEach((site: any) => {
          const addDate = Math.floor(new Date(site.createdAt).getTime() / 1000);
          const lastModified = Math.floor(new Date(site.updatedAt).getTime() / 1000);
          
          html += `            <DT><A HREF="${escapeHtml(site.url)}" ADD_DATE="${addDate}" LAST_MODIFIED="${lastModified}"`;
          
          if (site.favicon) {
            html += ` ICON="${escapeHtml(site.favicon)}"`;
          }
          
          html += `>${escapeHtml(site.name)}</A>\n`;
          
          if (site.description) {
            html += `            <DD>${escapeHtml(site.description)}\n`;
          }
          
          // Add sub-links if they exist
          if (site.subLinks && site.subLinks.length > 0) {
            html += `            <DL><p>\n`;
            site.subLinks.forEach((subLink: any) => {
              html += `                <DT><A HREF="${escapeHtml(subLink.url)}">${escapeHtml(subLink.name)}</A>\n`;
            });
            html += `            </DL><p>\n`;
          }
        });
        
        html += `        </DL><p>\n`;
      }
    });
    
    html += `    </DL><p>\n`;
  });

  html += `</DL><p>

<!-- Export Details -->
<!-- 
Generated by: CleanTabs
Export Date: ${currentDate}
Total Categories: ${categories.length}
Total Subcategories: ${categories.reduce((total, cat) => total + cat.subcategories.length, 0)}
Total Bookmarks: ${categories.reduce((total, cat) => 
  total + cat.subcategories.reduce((subTotal: number, sub: any) => subTotal + sub.sites.length, 0), 0)}
-->`;

  return html;
}

function escapeHtml(text: string): string {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}